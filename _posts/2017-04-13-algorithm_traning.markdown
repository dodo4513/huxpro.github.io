---
layout:     post
title:      "알고리즘 해법에 대한 체계적인 접근과 자주하는 실수들"
subtitle:   "알고리즘 면접이나 대회 전 한번 읽어보면 좋을 만한 것."
date:       2017-4-13
author:     "Xavy"
catalog:    true
tags:
    - Algorithm
    - Interview
---

### 시작하기 전에

###### 알고리즘 문제 해결 전략

<img class="shadow" src="/img/my-post/book_image/algorithm_strategy.PNG" alt="algorith">

 알고리즘을 공부했던 사람들은 누구나 알만한 책이 있다. **흰 책**, **종만 북** 등으로 부르곤 했던 알고리즘 문제 해결 전략(구종만 저)이다. 특유의 부드러운 말솜씨로 추상적이고 난해한 알고리즘들을 명쾌하게 잘 풀어낸 책이다. 책을 쭉 읽다 보면 가끔 나오는 유머도 정말 재미있다.
 
 아래의 해당 내용은 위 책을 공부하며 정리했던 내용이다. 만약 더 자세하게 알고 싶다면, 한 권 구매해 읽어보길 추천한다.

### 알고리즘 해법에 대한 체계적인 접근을 위한 7가지 질문들

1. 비슷한 문제를 풀어본 적이 있나?
2. 더욱 단순한 방법에서 시작할 수 있을까?
	
    a. 간단하게 풀 수 있는 문제를 너무 복잡하게 생각해서 어렵게 푸는 실수를 예방한다.
    
    b. 자료구조, 계산의 중복 등을 최적화를 통해 점진적으로 개선한다.
3. 내가 문제를 푸는 과정을 수식화할 수 있을까?
	
    a. 예제 입력을 손으로 직접 풀어본다.
4. 문제를 단순화할 수 있을까?
	
    a. 문제의 제약조건을 없애본다.
    
    b. 다차원의 문제를 1차원으로 줄여서 표현한다.
5. 문제를 분해할 수 있을까?
6. 뒤에서부터 생각해서 문제를 풀 수 있을까?
7. 순서를 강제할 수 있을까?

 알고리즘 문제는 풀기 전까지는 까다롭게 보이지만, 고생해서 풀고 나면 허탈한 경우가 꽤 많다. 그런 생각들은 대게`왜 내가 이 생각을 못했지?`부터 시작한다. 위 7가지 질문을 외울 필요까지는 없지만, 위 7가지 질문을 틈틈히 봐둔다면 허무한 실수가 조금은 줄지 않을까?

### 자주 하는 실수들

1. 산술 오버플로가 발생한다.

	a. int + int의 결과는 int 범위를 넘어설 수도 있다.
2. 배열 범위 밖 원소에 접근한다.
3. 일관되지 않은 범위 표현 방식을 사용한다.
4. Off-by-one 오류가 발생한다.

	a. 계산의 큰 줄기는 맞지만, 하나가 모자라거나 하나가 많아서 범하는 오류를 말한다.
5. 컴파일러가 잡아주지 못하는 상수 오타.

	a. 스펠링.

    b. 반복되는 숫자의 개수.

    c. 64bit에 들어갈 상수를 사용하면서 LL을 붙이지 않은 경우.
6. 스택 오버플로.

	a. 재귀 함수를 이용한다면 조심해야 한다.
7. 다차원 배열 인덱스 순서 바꿔쓰기
8. 최소, 최대 예외 잘못 다루기.

	a. 가장 작은 입력과 큰 입력은 따로 예외 처리를 해야 하는 문제가 더러 있다.
9. 연산자 우선순위 잘못 쓰기.
10. 변수 초기화 문제.

	a. 같은 입력을 두 번 넣는 방법으로 간단히 테스트해볼 수 있다.

### 마치며

 난 오래오래 개발자로 일하고 싶다. 이를 위한 전제조건 중 하나가 알고리즘이라 생각한다. 다양한 문제들을 꾸준히 접하며, 두뇌 트레이닝 하다보면 위와 같은 것들이 자연스럽게 체화되겠지? 이를 바탕으로 더욱 양질의 소스를 작성할 수 있을 것이라 믿는다.

### 참고

[알고리즘 문제 해결 전략 ](http://book.naver.com/bookdb/book_detail.nhn?bid=7058764)