---
layout:     post
title:      "Web 서버와 WAS(Web Application Server)의 역할과 나눠진 이유"
subtitle:   "Web architecture에 대한 고찰"
date:       2017-6-18
author:     "Xavy"
catalog:    true
tags:
    - Interview
    - Web
---

### 시작하기 전에

학교에서 Web 관련 프로젝트를 진행할 땐 Tomcat 하나만 설치하면 모든게 해결됐다.
때문에 나는 Web 서버하면 자연히 Tomcat이 떠올랐고 WAS에 대한 개념은 전혀 없었다. 

그러나 실제 서비스를 구축할 떈 서버 인프라를 Tomcat 하나로 구축할 수 없다.
자연히 WAS 라는 용어를 듣게 될 텐데, 이 둘은 무슨 관계를 가지고 있는지 살펴보자.

※ 개인적인 생각이 듬뿍 담겨져있는 정리이므로, 혹 이견이 있는 경우 댓글로 가르침을 주시길 바랍니다!

### Web서버와 WAS

위키백과 기준으로 Web 서버는 아래의 뜻을 가지고 있다.

1. 웹 서버 (하드웨어) : 위에 언급한 기능을 제공하는 컴퓨터 프로그램을 실행하는 컴퓨터

2. 웹 서버  : 웹 브라우저와 같은 클라이언트로부터 HTTP 요청을 받아들이고, HTML 문서와 같은 웹 페이지를 반환하는 컴퓨터 프로그램

보통 Web 서버라는 단어를 단독 사용할 떈 아마 `전체적인 Web 서비스를 제공하는 Architecture`를 지칭하고, WAS라는 단어와 함께 사용했다면  `HTTP 문서와 같이 정적인 파일을 반환하는 서버`를 반환하는 컴퓨터를 뜻 한다고 생각한다. 

1 번의 뜻은 누구나 한번 읽어봤으니 이제 잘 알것이고, 문제는 WAS와 함께 사용하는 경우인데 왜 WAS와 함께면 Web 서버의 뜻이 달라질까요?

왜냐하면 WAS 서버는 프로그래밍 `언어를 읽고 처리해 동적으로 HTTP 문서를 만드는 역할`을 하기 때문이다..
어떤 사용자가 접속하고 어떤 요청을 하느냐에 따라, 미리 컴파일된 코드로 HTML 문서를 가공한다. 
때문에 `클라이언트의 다양한 요구에 맞춰 동작하는 웹 서비스를 제공`할 수 있게 되는 것이다.
이 때 사용되는 기술 셋들이 PHP, JSP, ASP 등 이다. 
 
이에 반에 Web 서버는 HTTP 문서와 같이 정적인 파일을 반환하는 역할을 한다. 아래의 그림을 보면 전체적인 구조가 더 쉽게 이해될 것 같다. 

<img class="shadow" src="/img/my-post/20170618_server_architecture/server.PNG" alt="server">

User(브라우저)의 요청이 들어오면 Web 서버는 무엇을 요구하는지에 따라 다른 행동을 취한다. 
정적인 파일들(이미지, 동영상, HTML 문서) 등을 요구한다면 WAS에 물어보지 않고 바로 자원을 넘겨준다.
그 외에 사용자에 맞춰 다른 컨텐츠를 보여줘야 한다면, WAS에게 해당 요청을 전달하고 WAS에게 완성된 HTML을 받아 User에게 다시 전달하는 역할을 한다.

단순히 HTTP 프로토콜에 맞춰 파일을 주고받는 역할을 Web 서버가, 동적인 컨텐츠나 응용 서비스를 제공해야 하는 부분은 WAS가 한다고 생각하면 될 것 같다.

### 왜 두 역할로 나누어 처리를 할까?
 
시작은 `서버의 자원을 효율적으로 사용하자`에서 출발한했다고 생각된다.

사용자가 원하는 요청에 대한 결과값을 모두 만들어놓고 서비스하기엔 절대적으로 자원이 부족하다.
때문에 서버는 사용자의 요청을 보고 그에 맞춰 그때그때 결과를 만들어 보여주게 된다.

따라서 데이터베이스에서 가져온 데이터를 미리 짜여진 비즈니스 로직에 맞춰 가공하는 부분에 많은 자원이 들어간다.

다음으로 알아야 할건 클라이언트(브라우저)에게 이미지 파일을 보내주는 방식이다. 
이런 정적인 파일들은 HTML 문서가 클라이언트로 보내질 때 함께 가는 것이 아니고, 브라우저가 HTML 파일을 먼저 받고 그에 필요한 이미지 파일들을 다시 서버로 요청하면 그때그때 보내준다.

우리의 서버는 데이터베이스를 왓다갔다 하며 로직을 처리하기 바쁜데, 단순한 정적 파일을 브라우저에게 돌려주는 역할까지 해야할까? -> NO!

이 둘을 나누어 처리하면 더욱 효율적으로 서버의 자원을 활용할 수 있다.
(물론 정적 파일들을 어플리케이션 서버까지 가지않고 앞단에서 바로 사용자의 브라우저에게 빠르게 보내줄 수 있는 장점도 있다.)

쉬운 예시인 정적파일 외에도 SSL에 대한 암복호화에 대한 처리나, 접근 허용 IP 관리, 2대 이상의 서버에서 세션 관리 등 앞단의 Web 서버에서 처리하면 좋은 것들이 더러있다.
 
좀더 나아가자면 서비스의 규모가 커졌을 때, 비즈니스의 요구사항에 맞춰 Web 서버와 WAS 서버의 대수를 유도리있게 조절해 세팅할 수도 있다.
  
### 마치며

이곳저곳에서 주서들은 정보와 지식들을 정리해 해당 포스팅을 썻는데, 내가 생각하는 Web 서버와 WAS 서버의 느낌을 잘 전달될지 모르겠다.

이 두 용어의 정의가 중요하기 보단, 서로의 역할이 나눠져 있고, 왜 나눠져 있는지에 대해 생각을 정리하고 싶었는데 주절주절 쓰지않았나 싶다.

<img class="shadow" src="/img/my-post/20170618_server_architecture/apache.PNG" alt="apache">

추가적으로 Tomcat의 전체 이름은 사실 Apache tomcat으로 Web 서버의 기능(Apache)과 WAS 서버의 기능(Tomcat)을 다 가지고 있기 때문에 저것만 받아서 그냥 돌려도 잘 된다 ㅎㅎ

### 참고

[웹 서버 - 위키백과](https://ko.wikipedia.org/wiki/%EC%9B%B9_%EC%84%9C%EB%B2%84)

[웹 어플리케이션 서버 - 위키백과](https://ko.wikipedia.org/wiki/%EC%9B%B9_%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98_%EC%84%9C%EB%B2%84)

[Apache tomcat 공식 홈페이지](http://tomcat.apache.org/)